name: Foundry CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  unit:
    name: Unit & local integration tests
    runs-on: ubuntu-latest
    env:
      MIN_LINE_COVERAGE: 95 # required minimum line coverage percentage
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install deps
        run: |
          rm -rf lib
          forge install  OpenZeppelin/openzeppelin-contracts@v5.4.0
          forge install  foundry-rs/forge-std@v1.10.0
      - name: 'Create env file'
        run: |
          echo "testing secrets: ${{ toJson(secrets) }}"
          echo "MAINNET_RPC_URL=${{ secrets.MAINNET_RPC_URL }}" >> .env
          echo "TOKEN_OWNER_PK=${{ secrets.TOKEN_OWNER_PK }}" >> .env
          echo "WETH=${{ secrets.WETH }}" >> .env
          echo "UNIV2_ROUTER=${{ secrets.UNIV2_ROUTER }}" >> .env
          echo "TESTNET_DEPLOYER_PK=${{ secrets.TESTNET_DEPLOYER_PK }}" >> .env
          echo "SEPOLIA_RPC_URL=${{ secrets.SEPOLIA_RPC_URL }}" >> .env
          echo "SEPOLIA_WETH=${{ secrets.SEPOLIA_WETH }}" >> .env
          echo "SEPOLIA_UNIV2_ROUTER=${{ secrets.SEPOLIA_UNIV2_ROUTER }}" >> .env
          echo "FEE_RECIPIENT=${{ secrets.FEE_RECIPIENT }}" >> .env
          echo "FEE_BPS=${{ secrets.FEE_BPS }}" >> .env
          echo "SWAP_FEE_BPS=${{ secrets.SWAP_FEE_BPS }}" >> .env
          echo "FEE_THRESHOLD_WEI=${{ secrets.FEE_THRESHOLD_WEI }}" >> .env
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> .env

      - name: Check solidity files format
        run: forge fmt --check

      - name: Run local tests
        run:
          forge test --gas-report -vvv --via-ir

      - name: Run fuzz tests
        run: forge test --gas-report -vvv --fuzz-runs 50000 --via-ir

      - name: Run coverage
        run: forge coverage --via-ir --ir-minimum --report lcov
        continue-on-error: true
        
      - name: Summarize coverage
        if: always()
        run: |
          if [ -f lcov.info ]; then
            TOTAL_LINE_COV=$(awk -F: '/^LF:/ {lf+=$2} /^LH:/ {lh+=$2} END { if (lf>0) printf("%.2f", (lh/lf)*100); }' lcov.info)
            echo "## Solidity Coverage" >> $GITHUB_STEP_SUMMARY
            echo "Total line coverage: ${TOTAL_LINE_COV}%" >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            # Per-file summary (only for source files under src/)
            awk -F: '
              /^SF:/ {file=$2}
              /^LF:/ {lf=$2}
              /^LH:/ {lh=$2; if (lf>0 && file ~ /src\//) {printf("%s: %.2f%% (%d/%d)\n", file, (lh/lf)*100, lh, lf)} }
            ' lcov.info | sort -k2 -r >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            # Generate simple badge JSON artifact
            PCT_INT=$(awk -F: '/^LF:/ {lf+=$2} /^LH:/ {lh+=$2} END { if (lf>0) printf("%.0f", (lh/lf)*100); }' lcov.info)
            COLOR=red
            if [ "$PCT_INT" -ge 90 ]; then COLOR=brightgreen; elif [ "$PCT_INT" -ge 80 ]; then COLOR=green; elif [ "$PCT_INT" -ge 70 ]; then COLOR=yellow; elif [ "$PCT_INT" -ge 60 ]; then COLOR=orange; fi
            echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${PCT_INT}%\",\"color\":\"$COLOR\"}" > coverage-badge.json
          else
            echo "## Solidity Coverage" >> $GITHUB_STEP_SUMMARY
            echo "lcov.info not found" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            lcov.info
            coverage-badge.json
          if-no-files-found: warn
          retention-days: 7

      - name: Enforce minimum coverage
        if: success() && !cancelled()
        run: |
          if [ ! -f lcov.info ]; then
            echo "lcov.info missing; failing" >&2
            exit 1
          fi
          PCT=$(awk -F: '/^LF:/ {lf+=$2} /^LH:/ {lh+=$2} END { if (lf>0) printf("%.0f", (lh/lf)*100); }' lcov.info)
          REQ=${MIN_LINE_COVERAGE}
          echo "Line coverage: ${PCT}% (required: ${REQ}%)"
          if [ "$PCT" -lt "$REQ" ]; then
            echo "Coverage below required threshold" >&2
            exit 1
          fi
          echo "Coverage requirement satisfied"

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          flags: solidity
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }} # only required for private repos
          verbose: true
